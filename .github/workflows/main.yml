name: Unit testing with coverage (master)

on:
  push:
    branches: [ main* ]
  pull_request:
    branches: [ main* ]

env:
  LINE_COV_GATE: 70
  MCDC_COV_GATE: 40

permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  run-cpptest-make:
    name: Analyze project with C/C++test

    # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:

    # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout code
      uses: actions/checkout@v4

    # Configures your CMake project. Be sure the compile_commands.json file is created.
    - name: Configure project
      run: cmake -Bbuild -Hiceoryx_meta -DBUILD_TEST=ON -DINTROSPECTION=OFF -DBINDING_C=OFF -DCPPTEST_COVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_PREFIX_PATH=$(pwd)/build/dependencies/

    # Builds your CMake project. (This step is optional, as it is not required for code analysis).
    #- name: Build project (optional)
    #  run: cmake --build build

    - name: Add cpptestcli properties
      run: / 
          echo "scontrol.rep1.git.workspace=${{github.workspace}}" >> settings.properties 

    # Runs code analysis with C/C++test.
    - name: Run C/C++test
      # Use the 'run-cpptest-action' GitHub action.
      uses: parasoft/run-cpptest-action@2.0.2
      # Optional parameters for 'run-cpptest-action'.
      with:
        # For CMake-based projects, use a compile_commands.json file as the input for analysis. 
        input: build/compile_commands.json
        testConfig: 'builtin://MISRA C++ 2023'
        compilerConfig: 'gcc_10-64'
        # Uncomment if you are using C/C++test 2020.2 to generate a SARIF report:
        # reportFormat: xml,html,custom
        # additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'
        additionalParams: -resource ${{github.workspace}}/iceoryx_hoofs -showdetails -settings settings.properties -exclude "**/googletest/**" -exclude "**/test/**" -exclude "**/testing/**" -exclude "**/googlemock/**" -exclude "**/iceoryx_examples/**"

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CpptestReports
        path: reports/*.*

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: View report
      run: |
        echo "View report at: https://$GITHUB_REPOSITORY_OWNER.github.io/$GITHUB_REPOSITORY/${{ steps.deployment.outputs.page_url }}/reports/report.html"
      working-directory: ${{github.workspace}}
      shell: bash

  build_with_coverage:
    runs-on: self-hosted
    continue-on-error: true

   # environment:
   # name: github-pages
   # url: ##${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Set build id
      shell: bash
      working-directory: ${{github.workspace}}
      run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -Bbuild -Hiceoryx_meta -DBUILD_TEST=ON -DINTROSPECTION=OFF -DBINDING_C=OFF -DCPPTEST_COVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_PREFIX_PATH=$(pwd)/build/dependencies/

    - name: Build 
      working-directory: ${{github.workspace}}/build/hoofs
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: make VERBOSE=1 -j12

    - name: Coverage Logs Cleanup
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: rm -rf cpptest-coverage/*/*.clog      

    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: hoofs/test/hoofs_moduletests --gtest_output=xml:gtest_results.xml 

    - name: Generate Reports
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: make cpptestcov-compute cpptestcov-suppress cpptestcov-report 
 
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReports
        include-hidden-files: true
        path: |
          iceoryx_hoofs/.coverage/*.*

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Fix permissions
      run: |
        chmod -c -R +rX "_site/" | while read line; do
          echo "::warning title=Invalid file permissions automatically fixed::$line"
        done

    - name: Upload Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{github.workspace}}/iceoryx_hoofs/.coverage

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Line Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements     
      run: NUMBER=$(cpptestcov query -coverage LC iceoryx_hoofs/.coverage) && if [[ $NUMBER -lt $LINE_COV_GATE ]]; then echo "Line coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, echieved $NUMBER%"; echo "Check html report https://mzwawa23.github.io/iceoryx/coverage.html"; false; else echo "Line coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE %)"; echo "check html report https://mzwawa23.github.io/iceoryx/coverage.html for details"; true; fi      
      
    - name: MCDC Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage MCDC iceoryx_hoofs/.coverage) && if [[ $NUMBER -lt $MCDC_COV_GATE ]]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, echieved $NUMBER%"; echo "Check html report https://mzwawa23.github.io/iceoryx/coverage.html"; false; else echo "MCDC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; echo "check html report https://mzwawa23.github.io/iceoryx/coverage.html for details"; true; fi      