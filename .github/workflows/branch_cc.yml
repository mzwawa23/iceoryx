name: Unit testing with coverage (branch)

on:
  push:
    branches: [ feature_branch*]

env:
  LINE_COV_GATE: 90
  MCDC_COV_GATE: 60

permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  build_with_coverage:
    runs-on: self-hosted
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Set build id
      shell: bash
      working-directory: ${{github.workspace}}
      run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v46
      # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
      with:
        files: |
          **.inl
          **.cpp
        files_ignore: |
          **/test_*.cpp

    - name: Prepare excludes
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        CPPTEST_CC_PSRC: iceoryx_hoofs/cmake/.cpptestcc
      run: |
        list=( $ALL_CHANGED_FILES )
        echo "cpptestcc.exclude regex:*" > $CPPTEST_CC_PSRC
        for file in ${list[@]}; do
          echo "cpptestcc.include regex:*$file" >> $CPPTEST_CC_PSRC
        done
        ls -la $CPPTEST_CC_PSRC
        cat $CPPTEST_CC_PSRC


    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -Bbuild -Hiceoryx_meta -DBUILD_TEST=ON -DCPPTEST_COVERAGE=ON 

    - name: Build 
      working-directory: ${{github.workspace}}/build/hoofs
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: make VERBOSE=1 -j12

    - name: Coverage Logs Cleanup
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: rm -rf cpptest-coverage/*/*.clog      

    - name: Run Tests
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ./hoofs/test/hoofs_integrationtests && ./hoofs/test/hoofs_mocktests && ./hoofs/test/hoofs_moduletests --gtest_output=xml:gtest_results.xml

    - name: Generate Reports
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: make cpptestcov-compute cpptestcov-suppress cpptestcov-report 
 
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReports
        include-hidden-files: true
        path: |
          iceoryx_hoofs/.coverage/*.*

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Fix permissions
      run: |
        chmod -c -R +rX "_site/" | while read line; do
          echo "::warning title=Invalid file permissions automatically fixed::$line"
        done

    - name: Upload Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{github.workspace}}/iceoryx_hoofs/.coverage

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Line Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements     
      run: NUMBER=$(cpptestcov query -coverage LC iceoryx_hoofs/.coverage) && if [[ $NUMBER -lt $LINE_COV_GATE ]]; then echo "Line coverage quality gate failed"; echo "Expected result $LINE_COV_GATE%, echieved $NUMBER%"; echo "Check html report https://mzwawa23.github.io/iceoryx/coverage.html"; false; else echo "Line coverage quality gate passed with $NUMBER% (required $LINE_COV_GATE %)"; echo "check html report https://mzwawa23.github.io/iceoryx/coverage.html for details"; true; fi  
      
    - name: MCDC Coverage Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      # Query for project's coverage and compare with the gate requirements
      run: NUMBER=$(cpptestcov query -coverage MCDC iceoryx_hoofs/.coverage) && if [[ $NUMBER -lt $MCDC_COV_GATE ]]; then echo "MCDC coverage quality gate failed"; echo "Expected result $MCDC_COV_GATE%, echieved $NUMBER%"; echo "Check html report https://mzwawa23.github.io/iceoryx/coverage.html"; false; else echo "MCDC coverage quality gate passed with $NUMBER% (required $MCDC_COV_GATE%)"; echo "check html report https://mzwawa23.github.io/iceoryx/coverage.html for details"; true; fi   